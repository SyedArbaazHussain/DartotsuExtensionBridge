// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'Mangayomi/Eval/dart/model/source_preference.dart';
import 'Mangayomi/Models/Source.dart';
import 'Settings/Settings.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3017083632140752865),
    name: 'BridgeSettings',
    lastPropertyId: const obx_int.IdUid(10, 3875180661503052837),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7385416695098923515),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5461218897682377574),
        name: 'currentManager',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6980582292414189719),
        name: 'sortedAnimeExtensions',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5494606006206670012),
        name: 'sortedMangaExtensions',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2160888588355212473),
        name: 'sortedNovelExtensions',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 625425145860600723),
        name: 'aniyomiAnimeExtensions',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 8413454826115746665),
        name: 'aniyomiMangaExtensions',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 5123602363349707106),
        name: 'mangayomiAnimeExtensions',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 1668157684537078137),
        name: 'mangayomiMangaExtensions',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 3875180661503052837),
        name: 'mangayomiNovelExtensions',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 1037367280118210497),
    name: 'MSource',
    lastPropertyId: const obx_int.IdUid(32, 8380072201576843240),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4517173364103937122),
        name: 'id',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4864129207014969653),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5496403385401579182),
        name: 'baseUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 465942119624508515),
        name: 'lang',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2491974056729134955),
        name: 'isActive',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4127123531630103491),
        name: 'isAdded',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2608478752515723874),
        name: 'isPinned',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 7195486618826505898),
        name: 'isNsfw',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 8854715886408609136),
        name: 'sourceCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 6525923374135803509),
        name: 'sourceCodeUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 144817716989114854),
        name: 'typeSource',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 6885407468883258140),
        name: 'iconUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 4069721778451744564),
        name: 'isFullData',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 2768793411449391285),
        name: 'hasCloudflare',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 5034027805215073129),
        name: 'lastUsed',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 8481874123581026313),
        name: 'dateFormat',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 7921323983743914316),
        name: 'dateFormatLocale',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 2102750521923181473),
        name: 'apiUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 6548404280092392234),
        name: 'version',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 3940550129983865252),
        name: 'versionLast',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 4724082327497106294),
        name: 'headers',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 7106689989090702219),
        name: 'isManga',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 3574613180096596136),
        name: 'appMinVerReq',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(24, 5074971825438943388),
        name: 'additionalParams',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(25, 3364473604122449172),
        name: 'isLocal',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(26, 7054086330193940801),
        name: 'isObsolete',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(27, 2297068311884952510),
        name: 'repo',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(30, 2424857194541808558),
        name: 'obxId',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(31, 1258971489016184429),
        name: 'dbItemType',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(32, 8380072201576843240),
        name: 'dbSourceCodeLanguage',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 4196949597625950906),
    name: 'SourcePreference',
    lastPropertyId: const obx_int.IdUid(3, 5171382770766947527),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4259391895135661600),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7789443999229216687),
        name: 'sourceId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5171382770766947527),
        name: 'key',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 3099139859148263273),
    name: 'SourcePreferenceStringValue',
    lastPropertyId: const obx_int.IdUid(4, 2233054663462614359),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3972796288486480918),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4084354197495346396),
        name: 'sourceId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8560305752570954748),
        name: 'key',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2233054663462614359),
        name: 'value',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(4, 3099139859148263273),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [5273530442678863311, 3949267022797947081],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    BridgeSettings: obx_int.EntityDefinition<BridgeSettings>(
      model: _entities[0],
      toOneRelations: (BridgeSettings object) => [],
      toManyRelations: (BridgeSettings object) => {},
      getId: (BridgeSettings object) => object.id,
      setId: (BridgeSettings object, int id) {
        object.id = id;
      },
      objectToFB: (BridgeSettings object, fb.Builder fbb) {
        final currentManagerOffset = object.currentManager == null
            ? null
            : fbb.writeString(object.currentManager!);
        final sortedAnimeExtensionsOffset = fbb.writeList(
          object.sortedAnimeExtensions
              .map(fbb.writeString)
              .toList(growable: false),
        );
        final sortedMangaExtensionsOffset = fbb.writeList(
          object.sortedMangaExtensions
              .map(fbb.writeString)
              .toList(growable: false),
        );
        final sortedNovelExtensionsOffset = fbb.writeList(
          object.sortedNovelExtensions
              .map(fbb.writeString)
              .toList(growable: false),
        );
        final aniyomiAnimeExtensionsOffset = fbb.writeList(
          object.aniyomiAnimeExtensions
              .map(fbb.writeString)
              .toList(growable: false),
        );
        final aniyomiMangaExtensionsOffset = fbb.writeList(
          object.aniyomiMangaExtensions
              .map(fbb.writeString)
              .toList(growable: false),
        );
        final mangayomiAnimeExtensionsOffset = fbb.writeList(
          object.mangayomiAnimeExtensions
              .map(fbb.writeString)
              .toList(growable: false),
        );
        final mangayomiMangaExtensionsOffset = fbb.writeList(
          object.mangayomiMangaExtensions
              .map(fbb.writeString)
              .toList(growable: false),
        );
        final mangayomiNovelExtensionsOffset = fbb.writeList(
          object.mangayomiNovelExtensions
              .map(fbb.writeString)
              .toList(growable: false),
        );
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, currentManagerOffset);
        fbb.addOffset(2, sortedAnimeExtensionsOffset);
        fbb.addOffset(3, sortedMangaExtensionsOffset);
        fbb.addOffset(4, sortedNovelExtensionsOffset);
        fbb.addOffset(5, aniyomiAnimeExtensionsOffset);
        fbb.addOffset(6, aniyomiMangaExtensionsOffset);
        fbb.addOffset(7, mangayomiAnimeExtensionsOffset);
        fbb.addOffset(8, mangayomiMangaExtensionsOffset);
        fbb.addOffset(9, mangayomiNovelExtensionsOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final currentManagerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final sortedAnimeExtensionsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final sortedMangaExtensionsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 10, []);
        final sortedNovelExtensionsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 12, []);
        final aniyomiAnimeExtensionsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 14, []);
        final aniyomiMangaExtensionsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 16, []);
        final mangayomiAnimeExtensionsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 18, []);
        final mangayomiMangaExtensionsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 20, []);
        final mangayomiNovelExtensionsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 22, []);
        final object = BridgeSettings(
          id: idParam,
          currentManager: currentManagerParam,
          sortedAnimeExtensions: sortedAnimeExtensionsParam,
          sortedMangaExtensions: sortedMangaExtensionsParam,
          sortedNovelExtensions: sortedNovelExtensionsParam,
          aniyomiAnimeExtensions: aniyomiAnimeExtensionsParam,
          aniyomiMangaExtensions: aniyomiMangaExtensionsParam,
          mangayomiAnimeExtensions: mangayomiAnimeExtensionsParam,
          mangayomiMangaExtensions: mangayomiMangaExtensionsParam,
          mangayomiNovelExtensions: mangayomiNovelExtensionsParam,
        );

        return object;
      },
    ),
    MSource: obx_int.EntityDefinition<MSource>(
      model: _entities[1],
      toOneRelations: (MSource object) => [],
      toManyRelations: (MSource object) => {},
      getId: (MSource object) => object.obxId,
      setId: (MSource object, int id) {
        object.obxId = id;
      },
      objectToFB: (MSource object, fb.Builder fbb) {
        final nameOffset = object.name == null
            ? null
            : fbb.writeString(object.name!);
        final baseUrlOffset = object.baseUrl == null
            ? null
            : fbb.writeString(object.baseUrl!);
        final langOffset = object.lang == null
            ? null
            : fbb.writeString(object.lang!);
        final sourceCodeOffset = object.sourceCode == null
            ? null
            : fbb.writeString(object.sourceCode!);
        final sourceCodeUrlOffset = object.sourceCodeUrl == null
            ? null
            : fbb.writeString(object.sourceCodeUrl!);
        final typeSourceOffset = object.typeSource == null
            ? null
            : fbb.writeString(object.typeSource!);
        final iconUrlOffset = object.iconUrl == null
            ? null
            : fbb.writeString(object.iconUrl!);
        final dateFormatOffset = object.dateFormat == null
            ? null
            : fbb.writeString(object.dateFormat!);
        final dateFormatLocaleOffset = object.dateFormatLocale == null
            ? null
            : fbb.writeString(object.dateFormatLocale!);
        final apiUrlOffset = object.apiUrl == null
            ? null
            : fbb.writeString(object.apiUrl!);
        final versionOffset = object.version == null
            ? null
            : fbb.writeString(object.version!);
        final versionLastOffset = object.versionLast == null
            ? null
            : fbb.writeString(object.versionLast!);
        final headersOffset = object.headers == null
            ? null
            : fbb.writeString(object.headers!);
        final appMinVerReqOffset = object.appMinVerReq == null
            ? null
            : fbb.writeString(object.appMinVerReq!);
        final additionalParamsOffset = object.additionalParams == null
            ? null
            : fbb.writeString(object.additionalParams!);
        final repoOffset = object.repo == null
            ? null
            : fbb.writeString(object.repo!);
        fbb.startTable(33);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, baseUrlOffset);
        fbb.addOffset(3, langOffset);
        fbb.addBool(4, object.isActive);
        fbb.addBool(5, object.isAdded);
        fbb.addBool(6, object.isPinned);
        fbb.addBool(7, object.isNsfw);
        fbb.addOffset(8, sourceCodeOffset);
        fbb.addOffset(9, sourceCodeUrlOffset);
        fbb.addOffset(10, typeSourceOffset);
        fbb.addOffset(11, iconUrlOffset);
        fbb.addBool(12, object.isFullData);
        fbb.addBool(13, object.hasCloudflare);
        fbb.addBool(14, object.lastUsed);
        fbb.addOffset(15, dateFormatOffset);
        fbb.addOffset(16, dateFormatLocaleOffset);
        fbb.addOffset(17, apiUrlOffset);
        fbb.addOffset(18, versionOffset);
        fbb.addOffset(19, versionLastOffset);
        fbb.addOffset(20, headersOffset);
        fbb.addBool(21, object.isManga);
        fbb.addOffset(22, appMinVerReqOffset);
        fbb.addOffset(23, additionalParamsOffset);
        fbb.addBool(24, object.isLocal);
        fbb.addBool(25, object.isObsolete);
        fbb.addOffset(26, repoOffset);
        fbb.addInt64(29, object.obxId);
        fbb.addInt64(30, object.dbItemType);
        fbb.addInt64(31, object.dbSourceCodeLanguage);
        fbb.finish(fbb.endTable());
        return object.obxId;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final baseUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final langParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final typeSourceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final iconUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final dateFormatParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 34);
        final dateFormatLocaleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 36);
        final apiUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 38);
        final sourceCodeUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final versionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 40);
        final versionLastParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 42);
        final sourceCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final headersParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 44);
        final repoParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 56);
        final appMinVerReqParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 48);
        final additionalParamsParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 50);
        final isActiveParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final isAddedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          14,
          false,
        );
        final isNsfwParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          18,
          false,
        );
        final isFullDataParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          28,
          false,
        );
        final hasCloudflareParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          30,
          false,
        );
        final isPinnedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final lastUsedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          32,
          false,
        );
        final isMangaParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          46,
          false,
        );
        final isLocalParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          52,
          false,
        );
        final isObsoleteParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          54,
          false,
        );
        final object =
            MSource(
                id: idParam,
                name: nameParam,
                baseUrl: baseUrlParam,
                lang: langParam,
                typeSource: typeSourceParam,
                iconUrl: iconUrlParam,
                dateFormat: dateFormatParam,
                dateFormatLocale: dateFormatLocaleParam,
                apiUrl: apiUrlParam,
                sourceCodeUrl: sourceCodeUrlParam,
                version: versionParam,
                versionLast: versionLastParam,
                sourceCode: sourceCodeParam,
                headers: headersParam,
                repo: repoParam,
                appMinVerReq: appMinVerReqParam,
                additionalParams: additionalParamsParam,
                isActive: isActiveParam,
                isAdded: isAddedParam,
                isNsfw: isNsfwParam,
                isFullData: isFullDataParam,
                hasCloudflare: hasCloudflareParam,
                isPinned: isPinnedParam,
                lastUsed: lastUsedParam,
                isManga: isMangaParam,
                isLocal: isLocalParam,
                isObsolete: isObsoleteParam,
              )
              ..obxId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                62,
                0,
              )
              ..dbItemType = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                64,
                0,
              )
              ..dbSourceCodeLanguage = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                66,
                0,
              );

        return object;
      },
    ),
    SourcePreference: obx_int.EntityDefinition<SourcePreference>(
      model: _entities[2],
      toOneRelations: (SourcePreference object) => [],
      toManyRelations: (SourcePreference object) => {},
      getId: (SourcePreference object) => object.id,
      setId: (SourcePreference object, int id) {
        object.id = id;
      },
      objectToFB: (SourcePreference object, fb.Builder fbb) {
        final keyOffset = object.key == null
            ? null
            : fbb.writeString(object.key!);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.sourceId);
        fbb.addOffset(2, keyOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final sourceIdParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          6,
        );
        final keyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final object = SourcePreference(
          id: idParam,
          sourceId: sourceIdParam,
          key: keyParam,
        );

        return object;
      },
    ),
    SourcePreferenceStringValue:
        obx_int.EntityDefinition<SourcePreferenceStringValue>(
          model: _entities[3],
          toOneRelations: (SourcePreferenceStringValue object) => [],
          toManyRelations: (SourcePreferenceStringValue object) => {},
          getId: (SourcePreferenceStringValue object) => object.id,
          setId: (SourcePreferenceStringValue object, int id) {
            object.id = id;
          },
          objectToFB: (SourcePreferenceStringValue object, fb.Builder fbb) {
            final keyOffset = object.key == null
                ? null
                : fbb.writeString(object.key!);
            final valueOffset = object.value == null
                ? null
                : fbb.writeString(object.value!);
            fbb.startTable(5);
            fbb.addInt64(0, object.id);
            fbb.addInt64(1, object.sourceId);
            fbb.addOffset(2, keyOffset);
            fbb.addOffset(3, valueOffset);
            fbb.finish(fbb.endTable());
            return object.id;
          },
          objectFromFB: (obx.Store store, ByteData fbData) {
            final buffer = fb.BufferContext(fbData);
            final rootOffset = buffer.derefObject(0);
            final idParam = const fb.Int64Reader().vTableGet(
              buffer,
              rootOffset,
              4,
              0,
            );
            final sourceIdParam = const fb.Int64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              6,
            );
            final keyParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGetNullable(buffer, rootOffset, 8);
            final valueParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGetNullable(buffer, rootOffset, 10);
            final object = SourcePreferenceStringValue(
              id: idParam,
              sourceId: sourceIdParam,
              key: keyParam,
              value: valueParam,
            );

            return object;
          },
        ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [BridgeSettings] entity fields to define ObjectBox queries.
class BridgeSettings_ {
  /// See [BridgeSettings.id].
  static final id = obx.QueryIntegerProperty<BridgeSettings>(
    _entities[0].properties[0],
  );

  /// See [BridgeSettings.currentManager].
  static final currentManager = obx.QueryStringProperty<BridgeSettings>(
    _entities[0].properties[1],
  );

  /// See [BridgeSettings.sortedAnimeExtensions].
  static final sortedAnimeExtensions =
      obx.QueryStringVectorProperty<BridgeSettings>(_entities[0].properties[2]);

  /// See [BridgeSettings.sortedMangaExtensions].
  static final sortedMangaExtensions =
      obx.QueryStringVectorProperty<BridgeSettings>(_entities[0].properties[3]);

  /// See [BridgeSettings.sortedNovelExtensions].
  static final sortedNovelExtensions =
      obx.QueryStringVectorProperty<BridgeSettings>(_entities[0].properties[4]);

  /// See [BridgeSettings.aniyomiAnimeExtensions].
  static final aniyomiAnimeExtensions =
      obx.QueryStringVectorProperty<BridgeSettings>(_entities[0].properties[5]);

  /// See [BridgeSettings.aniyomiMangaExtensions].
  static final aniyomiMangaExtensions =
      obx.QueryStringVectorProperty<BridgeSettings>(_entities[0].properties[6]);

  /// See [BridgeSettings.mangayomiAnimeExtensions].
  static final mangayomiAnimeExtensions =
      obx.QueryStringVectorProperty<BridgeSettings>(_entities[0].properties[7]);

  /// See [BridgeSettings.mangayomiMangaExtensions].
  static final mangayomiMangaExtensions =
      obx.QueryStringVectorProperty<BridgeSettings>(_entities[0].properties[8]);

  /// See [BridgeSettings.mangayomiNovelExtensions].
  static final mangayomiNovelExtensions =
      obx.QueryStringVectorProperty<BridgeSettings>(_entities[0].properties[9]);
}

/// [MSource] entity fields to define ObjectBox queries.
class MSource_ {
  /// See [MSource.id].
  static final id = obx.QueryIntegerProperty<MSource>(
    _entities[1].properties[0],
  );

  /// See [MSource.name].
  static final name = obx.QueryStringProperty<MSource>(
    _entities[1].properties[1],
  );

  /// See [MSource.baseUrl].
  static final baseUrl = obx.QueryStringProperty<MSource>(
    _entities[1].properties[2],
  );

  /// See [MSource.lang].
  static final lang = obx.QueryStringProperty<MSource>(
    _entities[1].properties[3],
  );

  /// See [MSource.isActive].
  static final isActive = obx.QueryBooleanProperty<MSource>(
    _entities[1].properties[4],
  );

  /// See [MSource.isAdded].
  static final isAdded = obx.QueryBooleanProperty<MSource>(
    _entities[1].properties[5],
  );

  /// See [MSource.isPinned].
  static final isPinned = obx.QueryBooleanProperty<MSource>(
    _entities[1].properties[6],
  );

  /// See [MSource.isNsfw].
  static final isNsfw = obx.QueryBooleanProperty<MSource>(
    _entities[1].properties[7],
  );

  /// See [MSource.sourceCode].
  static final sourceCode = obx.QueryStringProperty<MSource>(
    _entities[1].properties[8],
  );

  /// See [MSource.sourceCodeUrl].
  static final sourceCodeUrl = obx.QueryStringProperty<MSource>(
    _entities[1].properties[9],
  );

  /// See [MSource.typeSource].
  static final typeSource = obx.QueryStringProperty<MSource>(
    _entities[1].properties[10],
  );

  /// See [MSource.iconUrl].
  static final iconUrl = obx.QueryStringProperty<MSource>(
    _entities[1].properties[11],
  );

  /// See [MSource.isFullData].
  static final isFullData = obx.QueryBooleanProperty<MSource>(
    _entities[1].properties[12],
  );

  /// See [MSource.hasCloudflare].
  static final hasCloudflare = obx.QueryBooleanProperty<MSource>(
    _entities[1].properties[13],
  );

  /// See [MSource.lastUsed].
  static final lastUsed = obx.QueryBooleanProperty<MSource>(
    _entities[1].properties[14],
  );

  /// See [MSource.dateFormat].
  static final dateFormat = obx.QueryStringProperty<MSource>(
    _entities[1].properties[15],
  );

  /// See [MSource.dateFormatLocale].
  static final dateFormatLocale = obx.QueryStringProperty<MSource>(
    _entities[1].properties[16],
  );

  /// See [MSource.apiUrl].
  static final apiUrl = obx.QueryStringProperty<MSource>(
    _entities[1].properties[17],
  );

  /// See [MSource.version].
  static final version = obx.QueryStringProperty<MSource>(
    _entities[1].properties[18],
  );

  /// See [MSource.versionLast].
  static final versionLast = obx.QueryStringProperty<MSource>(
    _entities[1].properties[19],
  );

  /// See [MSource.headers].
  static final headers = obx.QueryStringProperty<MSource>(
    _entities[1].properties[20],
  );

  /// See [MSource.isManga].
  static final isManga = obx.QueryBooleanProperty<MSource>(
    _entities[1].properties[21],
  );

  /// See [MSource.appMinVerReq].
  static final appMinVerReq = obx.QueryStringProperty<MSource>(
    _entities[1].properties[22],
  );

  /// See [MSource.additionalParams].
  static final additionalParams = obx.QueryStringProperty<MSource>(
    _entities[1].properties[23],
  );

  /// See [MSource.isLocal].
  static final isLocal = obx.QueryBooleanProperty<MSource>(
    _entities[1].properties[24],
  );

  /// See [MSource.isObsolete].
  static final isObsolete = obx.QueryBooleanProperty<MSource>(
    _entities[1].properties[25],
  );

  /// See [MSource.repo].
  static final repo = obx.QueryStringProperty<MSource>(
    _entities[1].properties[26],
  );

  /// See [MSource.obxId].
  static final obxId = obx.QueryIntegerProperty<MSource>(
    _entities[1].properties[27],
  );

  /// See [MSource.dbItemType].
  static final dbItemType = obx.QueryIntegerProperty<MSource>(
    _entities[1].properties[28],
  );

  /// See [MSource.dbSourceCodeLanguage].
  static final dbSourceCodeLanguage = obx.QueryIntegerProperty<MSource>(
    _entities[1].properties[29],
  );
}

/// [SourcePreference] entity fields to define ObjectBox queries.
class SourcePreference_ {
  /// See [SourcePreference.id].
  static final id = obx.QueryIntegerProperty<SourcePreference>(
    _entities[2].properties[0],
  );

  /// See [SourcePreference.sourceId].
  static final sourceId = obx.QueryIntegerProperty<SourcePreference>(
    _entities[2].properties[1],
  );

  /// See [SourcePreference.key].
  static final key = obx.QueryStringProperty<SourcePreference>(
    _entities[2].properties[2],
  );
}

/// [SourcePreferenceStringValue] entity fields to define ObjectBox queries.
class SourcePreferenceStringValue_ {
  /// See [SourcePreferenceStringValue.id].
  static final id = obx.QueryIntegerProperty<SourcePreferenceStringValue>(
    _entities[3].properties[0],
  );

  /// See [SourcePreferenceStringValue.sourceId].
  static final sourceId = obx.QueryIntegerProperty<SourcePreferenceStringValue>(
    _entities[3].properties[1],
  );

  /// See [SourcePreferenceStringValue.key].
  static final key = obx.QueryStringProperty<SourcePreferenceStringValue>(
    _entities[3].properties[2],
  );

  /// See [SourcePreferenceStringValue.value].
  static final value = obx.QueryStringProperty<SourcePreferenceStringValue>(
    _entities[3].properties[3],
  );
}
